---
// Card.astro - Reusable card component for HOFAMSCO School
// Features: Multiple variants, layouts, hover effects, images, content areas

export interface Props {
  // Card Variants
  variant?: 'default' | 'elevated' | 'outlined' | 'filled' | 'glass' | 'gradient';

  // Card Layouts
  layout?: 'vertical' | 'horizontal' | 'compact' | 'feature' | 'testimonial' | 'stat';

  // Visual Options
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl';
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';

  // Image Options
  image?: string;
  imageAlt?: string;
  imagePosition?: 'top' | 'left' | 'right' | 'background';
  imageAspect?: 'square' | 'video' | 'wide' | 'tall' | 'auto';
  imageOverlay?: boolean;

  // Content Options
  title?: string;
  subtitle?: string;
  description?: string;
  category?: string;
  date?: string;
  author?: string;

  // Interactive Options
  href?: string;
  target?: '_blank' | '_self' | '_parent' | '_top';
  clickable?: boolean;
  hoverable?: boolean;

  // Header & Footer Slots
  hasHeader?: boolean;
  hasFooter?: boolean;

  // Badge/Tag Options
  badge?: string;
  badgeVariant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info';

  // Animation Options
  animate?: boolean;
  animationType?: 'fade' | 'slide' | 'scale' | 'bounce';

  // Custom Classes
  class?: string;
  headerClass?: string;
  bodyClass?: string;
  footerClass?: string;

  // Accessibility
  ariaLabel?: string;
  role?: string;
}

const {
  variant = 'default',
  layout = 'vertical',
  padding = 'md',
  rounded = 'lg',
  shadow = 'md',
  image,
  imageAlt = '',
  imagePosition = 'top',
  imageAspect = 'video',
  imageOverlay = false,
  title,
  subtitle,
  description,
  category,
  date,
  author,
  href,
  target,
  clickable = !!href,
  hoverable = true,
  hasHeader = false,
  hasFooter = false,
  badge,
  badgeVariant = 'primary',
  animate = false,
  animationType = 'fade',
  class: className = '',
  headerClass = '',
  bodyClass = '',
  footerClass = '',
  ariaLabel,
  role
} = Astro.props;

// Base card classes
const baseClasses = [
  'relative',
  'overflow-hidden',
  'transition-all',
  'duration-300',
  'ease-in-out',
  clickable ? 'cursor-pointer' : '',
  hoverable ? 'transform hover:scale-105' : '',
  animate ? `animate-${animationType}` : ''
];

// Variant styles
const variantStyles = {
  default: [
    'bg-white',
    'border',
    'border-hofamsco-gray-200',
    hoverable ? 'hover:border-hofamsco-blue-300' : ''
  ],
  elevated: [
    'bg-white',
    'border-0',
    hoverable ? 'hover:shadow-2xl' : ''
  ],
  outlined: [
    'bg-transparent',
    'border-2',
    'border-hofamsco-blue-200',
    hoverable ? 'hover:border-hofamsco-blue-400 hover:bg-hofamsco-blue-50' : ''
  ],
  filled: [
    'bg-hofamsco-blue-50',
    'border',
    'border-hofamsco-blue-100',
    hoverable ? 'hover:bg-hofamsco-blue-100' : ''
  ],
  glass: [
    'bg-white/80',
    'backdrop-blur-md',
    'border',
    'border-white/20',
    hoverable ? 'hover:bg-white/90' : ''
  ],
  gradient: [
    'bg-gradient-to-br',
    'from-hofamsco-blue-500',
    'to-hofamsco-red-500',
    'text-white',
    'border-0',
    hoverable ? 'hover:from-hofamsco-blue-600 hover:to-hofamsco-red-600' : ''
  ]
};

// Layout styles
const layoutStyles = {
  vertical: 'flex flex-col',
  horizontal: 'flex flex-row items-center',
  compact: 'flex flex-col space-y-2',
  feature: 'flex flex-col lg:flex-row lg:items-center',
  testimonial: 'flex flex-col text-center',
  stat: 'flex flex-col items-center text-center'
};

// Padding classes
const paddingClasses = {
  none: 'p-0',
  sm: 'p-3',
  md: 'p-4',
  lg: 'p-6',
  xl: 'p-8'
};

// Rounded classes
const roundedClasses = {
  none: 'rounded-none',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  xl: 'rounded-xl',
  '2xl': 'rounded-2xl',
  '3xl': 'rounded-3xl'
};

// Shadow classes
const shadowClasses = {
  none: 'shadow-none',
  sm: 'shadow-sm',
  md: 'shadow-md',
  lg: 'shadow-lg',
  xl: 'shadow-xl',
  '2xl': 'shadow-2xl'
};

// Image aspect ratio classes
const aspectClasses = {
  square: 'aspect-square',
  video: 'aspect-video',
  wide: 'aspect-[21/9]',
  tall: 'aspect-[4/5]',
  auto: 'aspect-auto'
};

// Badge variant classes
const badgeVariants = {
  primary: 'bg-hofamsco-blue-500 text-white',
  secondary: 'bg-hofamsco-gray-500 text-white',
  success: 'bg-green-500 text-white',
  warning: 'bg-yellow-500 text-white',
  danger: 'bg-red-500 text-white',
  info: 'bg-blue-500 text-white'
};

// Build final classes
const cardClasses = [
  ...baseClasses,
  ...variantStyles[variant],
  layoutStyles[layout],
  roundedClasses[rounded],
  shadowClasses[shadow],
  className
].filter(Boolean).join(' ');

// Content padding (different from card padding when image is present)
const contentPadding = image && imagePosition !== 'background' ? paddingClasses[padding] : '';
const cardPadding = !image || imagePosition === 'background' ? paddingClasses[padding] : 'p-0';

// Determine card element type
const CardElement = clickable && href ? 'a' : 'article';

// Image rendering function
const renderImage = () => {
  if (!image) return '';

  const imageClasses = [
    'object-cover',
    'w-full',
    imagePosition === 'background' ? 'absolute inset-0 z-0' : '',
    imagePosition === 'top' ? aspectClasses[imageAspect] : '',
    imagePosition === 'left' ? 'w-1/3 h-full' : '',
    imagePosition === 'right' ? 'w-1/3 h-full' : '',
    imageOverlay && imagePosition === 'background' ? 'opacity-20' : ''
  ].filter(Boolean).join(' ');

  return `
    <div class="${imagePosition === 'top' ? aspectClasses[imageAspect] + ' relative' : imagePosition === 'background' ? 'absolute inset-0' : 'relative'}">
      <img
        src="${image}"
        alt="${imageAlt}"
        class="${imageClasses}"
        loading="lazy"
      />
      ${imageOverlay && imagePosition !== 'background' ? '<div class="absolute inset-0 bg-black/20"></div>' : ''}
    </div>
  `;
};

// Badge rendering function
const renderBadge = () => {
  if (!badge) return '';

  return `
    <div class="absolute top-4 right-4 z-10">
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeVariants[badgeVariant]}">
        ${badge}
      </span>
    </div>
  `;
};

// Content header rendering
const renderContentHeader = () => {
  if (!category && !date && !author) return '';

  return `
    <div class="flex items-center justify-between text-sm text-hofamsco-gray-500 mb-2">
      ${category ? `<span class="text-hofamsco-blue-600 font-medium">${category}</span>` : '<span></span>'}
      <div class="flex items-center space-x-2">
        ${date ? `<time>${date}</time>` : ''}
        ${author ? `<span>by ${author}</span>` : ''}
      </div>
    </div>
  `;
};
---

{CardElement === 'a' ? (
  <a
    href={href}
    target={target}
    rel={target === '_blank' ? 'noopener noreferrer' : undefined}
    class={`${cardClasses} ${cardPadding} block`}
    aria-label={ariaLabel}
    role={role}
  >
    {/* Badge */}
    <Fragment set:html={renderBadge()} />

    {/* Background Image */}
    {image && imagePosition === 'background' && (
      <Fragment set:html={renderImage()} />
    )}

    {/* Content Container */}
    <div class={`relative ${imagePosition === 'background' ? 'z-10' : ''} ${layout === 'horizontal' ? 'flex items-center w-full' : ''}`}>

      {/* Left/Top Image */}
      {image && (imagePosition === 'top' || imagePosition === 'left') && (
        <Fragment set:html={renderImage()} />
      )}

      {/* Main Content */}
      <div class={`${contentPadding} ${layout === 'horizontal' ? 'flex-1' : ''} ${imagePosition === 'left' ? 'ml-4' : imagePosition === 'right' ? 'mr-4' : ''}`}>

        {/* Header Slot */}
        {hasHeader && (
          <header class={`mb-4 ${headerClass}`}>
            <slot name="header" />
          </header>
        )}

        {/* Content Header (category, date, author) */}
        <Fragment set:html={renderContentHeader()} />

        {/* Title */}
        {title && (
          <h3 class={`font-bold text-hofamsco-gray-900 mb-2 ${
            layout === 'stat' ? 'text-2xl' : 'text-lg'
          } ${variant === 'gradient' ? 'text-white' : ''}`}>
            {title}
          </h3>
        )}

        {/* Subtitle */}
        {subtitle && (
          <h4 class={`font-medium text-hofamsco-gray-700 mb-2 ${
            variant === 'gradient' ? 'text-white/90' : ''
          }`}>
            {subtitle}
          </h4>
        )}

        {/* Description */}
        {description && (
          <p class={`text-hofamsco-gray-600 mb-4 ${
            variant === 'gradient' ? 'text-white/80' : ''
          }`}>
            {description}
          </p>
        )}

        {/* Default Slot */}
        <div class={bodyClass}>
          <slot />
        </div>

        {/* Footer Slot */}
        {hasFooter && (
          <footer class={`mt-4 pt-4 border-t border-hofamsco-gray-100 ${footerClass} ${
            variant === 'gradient' ? 'border-white/20' : ''
          }`}>
            <slot name="footer" />
          </footer>
        )}
      </div>

      {/* Right Image */}
      {image && imagePosition === 'right' && (
        <Fragment set:html={renderImage()} />
      )}
    </div>
  </a>
) : (
  <article
    class={`${cardClasses} ${cardPadding}`}
    aria-label={ariaLabel}
    role={role}
  >
    {/* Badge */}
    <Fragment set:html={renderBadge()} />

    {/* Background Image */}
    {image && imagePosition === 'background' && (
      <Fragment set:html={renderImage()} />
    )}

    {/* Content Container */}
    <div class={`relative ${imagePosition === 'background' ? 'z-10' : ''} ${layout === 'horizontal' ? 'flex items-center w-full' : ''}`}>

      {/* Left/Top Image */}
      {image && (imagePosition === 'top' || imagePosition === 'left') && (
        <Fragment set:html={renderImage()} />
      )}

      {/* Main Content */}
      <div class={`${contentPadding} ${layout === 'horizontal' ? 'flex-1' : ''} ${imagePosition === 'left' ? 'ml-4' : imagePosition === 'right' ? 'mr-4' : ''}`}>

        {/* Header Slot */}
        {hasHeader && (
          <header class={`mb-4 ${headerClass}`}>
            <slot name="header" />
          </header>
        )}

        {/* Content Header (category, date, author) */}
        <Fragment set:html={renderContentHeader()} />

        {/* Title */}
        {title && (
          <h3 class={`font-bold text-hofamsco-gray-900 mb-2 ${
            layout === 'stat' ? 'text-2xl' : 'text-lg'
          } ${variant === 'gradient' ? 'text-white' : ''}`}>
            {title}
          </h3>
        )}

        {/* Subtitle */}
        {subtitle && (
          <h4 class={`font-medium text-hofamsco-gray-700 mb-2 ${
            variant === 'gradient' ? 'text-white/90' : ''
          }`}>
            {subtitle}
          </h4>
        )}

        {/* Description */}
        {description && (
          <p class={`text-hofamsco-gray-600 mb-4 ${
            variant === 'gradient' ? 'text-white/80' : ''
          }`}>
            {description}
          </p>
        )}

        {/* Default Slot */}
        <div class={bodyClass}>
          <slot />
        </div>

        {/* Footer Slot */}
        {hasFooter && (
          <footer class={`mt-4 pt-4 border-t border-hofamsco-gray-100 ${footerClass} ${
            variant === 'gradient' ? 'border-white/20' : ''
          }`}>
            <slot name="footer" />
          </footer>
        )}
      </div>

      {/* Right Image */}
      {image && imagePosition === 'right' && (
        <Fragment set:html={renderImage()} />
      )}
    </div>
  </article>
)}

<style>
  /* Animation classes */
  .animate-fade {
    animation: fadeIn 0.6s ease-out;
  }

  .animate-slide {
    animation: slideUp 0.6s ease-out;
  }

  .animate-scale {
    animation: scaleIn 0.6s ease-out;
  }

  .animate-bounce {
    animation: bounceIn 0.8s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Hover effects */
  .hover\:scale-105:hover {
    transform: scale(1.05);
  }

  /* Glass morphism effect */
  .backdrop-blur-md {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
  }

  /* Custom gradient animations */
  .bg-gradient-to-br {
    transition: background 0.3s ease;
  }

  /* Image overlay effects */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }

  /* Focus states for accessibility */
  a:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .hover\:scale-105:hover {
      transform: none; /* Disable scale on mobile */
    }

    /* Ensure touch targets are large enough */
    a {
      min-height: 44px;
    }
  }

  /* Print styles */
  @media print {
    .shadow-md,
    .shadow-lg,
    .shadow-xl,
    .shadow-2xl {
      box-shadow: none;
      border: 1px solid #d1d5db;
    }
  }

  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation: none !important;
      transition: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .border {
      border-width: 2px;
    }

    .text-hofamsco-gray-600 {
      color: #000;
    }
  }
</style>

<script>
  // Enhanced card interactions
  document.addEventListener('DOMContentLoaded', function() {
    // Add intersection observer for animation triggers
    const cards = document.querySelectorAll('[class*="animate-"]');

    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.animationPlayState = 'running';
        }
      });
    }, observerOptions);

    cards.forEach(card => {
      card.style.animationPlayState = 'paused';
      observer.observe(card);
    });

    // Add click analytics for card links
    const cardLinks = document.querySelectorAll('a[class*="cursor-pointer"]');
    cardLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // Analytics tracking could be added here
        const cardTitle = this.querySelector('h3')?.textContent;
        console.log('Card clicked:', cardTitle);
      });
    });

    // Add keyboard navigation support
    const clickableCards = document.querySelectorAll('[class*="cursor-pointer"]');
    clickableCards.forEach(card => {
      card.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.click();
        }
      });

      // Ensure cards are focusable
      if (!card.hasAttribute('tabindex')) {
        card.setAttribute('tabindex', '0');
      }
    });

    // Lazy load images in cards
    const cardImages = document.querySelectorAll('img[loading="lazy"]');
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.classList.add('opacity-0');
            img.onload = () => {
              img.classList.remove('opacity-0');
              img.classList.add('opacity-100', 'transition-opacity', 'duration-300');
            };
            imageObserver.unobserve(img);
          }
        });
      });

      cardImages.forEach(img => imageObserver.observe(img));
    }
  });
</script>
