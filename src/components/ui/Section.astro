---
// Section.astro - Reusable section wrapper component
// Features: Flexible layouts, background variants, spacing options, animations

export interface Props {
  // Layout & Styling
  variant?: 'default' | 'primary' | 'secondary' | 'accent' | 'dark' | 'gradient';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  margin?: 'none' | 'sm' | 'md' | 'lg' | 'xl';

  // Container Options
  container?: boolean;
  maxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '4xl' | '6xl' | '7xl' | 'full';

  // Visual Effects
  bordered?: boolean;
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';

  // Animation
  animate?: boolean;
  animationType?: 'fade' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right' | 'zoom';
  animationDelay?: number;

  // Background
  backgroundImage?: string;
  backgroundOverlay?: boolean;
  overlayOpacity?: number;

  // Accessibility
  id?: string;
  ariaLabel?: string;
  role?: string;

  // Custom Classes
  class?: string;
  contentClass?: string;
}

const {
  variant = 'default',
  padding = 'lg',
  margin = 'none',
  container = true,
  maxWidth = '6xl',
  bordered = false,
  shadow = 'none',
  rounded = 'none',
  animate = false,
  animationType = 'fade',
  animationDelay = 0,
  backgroundImage,
  backgroundOverlay = false,
  overlayOpacity = 0.5,
  id,
  ariaLabel,
  role,
  class: className = '',
  contentClass = ''
} = Astro.props;

// Background variant classes
const backgroundVariants = {
  default: 'bg-white',
  primary: 'bg-hofamsco-blue-50',
  secondary: 'bg-hofamsco-gray-50',
  accent: 'bg-hofamsco-red-50',
  dark: 'bg-hofamsco-gray-900 text-white',
  gradient: 'bg-gradient-to-br from-hofamsco-blue-50 via-white to-hofamsco-red-50'
};

// Padding classes
const paddingClasses = {
  none: '',
  sm: 'py-8 sm:py-12',
  md: 'py-12 sm:py-16',
  lg: 'py-16 sm:py-20',
  xl: 'py-20 sm:py-24',
  '2xl': 'py-24 sm:py-32'
};

// Margin classes
const marginClasses = {
  none: '',
  sm: 'my-8',
  md: 'my-12',
  lg: 'my-16',
  xl: 'my-20'
};

// Container max-width classes
const maxWidthClasses = {
  sm: 'max-w-sm',
  md: 'max-w-md',
  lg: 'max-w-lg',
  xl: 'max-w-xl',
  '2xl': 'max-w-2xl',
  '4xl': 'max-w-4xl',
  '6xl': 'max-w-6xl',
  '7xl': 'max-w-7xl',
  full: 'max-w-full'
};

// Shadow classes
const shadowClasses = {
  none: '',
  sm: 'shadow-sm',
  md: 'shadow-md',
  lg: 'shadow-lg',
  xl: 'shadow-xl'
};

// Rounded classes
const roundedClasses = {
  none: '',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  xl: 'rounded-xl',
  '2xl': 'rounded-2xl',
  full: 'rounded-full'
};

// Animation classes
const animationClasses = {
  fade: 'animate-fade-in',
  'slide-up': 'animate-slide-up',
  'slide-down': 'animate-slide-down',
  'slide-left': 'animate-slide-left',
  'slide-right': 'animate-slide-right',
  zoom: 'animate-zoom-in'
};

// Build section classes
const sectionClasses = [
  'relative',
  backgroundVariants[variant],
  paddingClasses[padding],
  marginClasses[margin],
  bordered ? 'border border-hofamsco-gray-200' : '',
  shadowClasses[shadow],
  roundedClasses[rounded],
  animate ? animationClasses[animationType] : '',
  animate ? 'opacity-0' : '',
  className
].filter(Boolean).join(' ');

// Build container classes
const containerClasses = [
  container ? 'container mx-auto px-4 sm:px-6 lg:px-8' : '',
  container ? maxWidthClasses[maxWidth] : '',
  contentClass
].filter(Boolean).join(' ');

// Animation delay style
const animationStyle = animate && animationDelay > 0
  ? `animation-delay: ${animationDelay}ms;`
  : '';

// Background image style
const backgroundStyle = backgroundImage
  ? `background-image: url('${backgroundImage}'); background-size: cover; background-position: center; background-repeat: no-repeat;`
  : '';
---

<section
  class={sectionClasses}
  style={`${animationStyle}${backgroundStyle}`}
  id={id}
  aria-label={ariaLabel}
  role={role}
>
  <!-- Background Image Overlay -->
  {backgroundImage && backgroundOverlay && (
    <div
      class="absolute inset-0 bg-black z-10"
      style={`opacity: ${overlayOpacity};`}
    ></div>
  )}

  <!-- Section Content -->
  <div class={`relative z-20 ${containerClasses}`}>
    <slot />
  </div>
</section>

<style>
  /* Custom Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideLeft {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideRight {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes zoomIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Animation Classes */
  .animate-fade-in {
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animate-slide-up {
    animation: slideUp 0.8s ease-out forwards;
  }

  .animate-slide-down {
    animation: slideDown 0.8s ease-out forwards;
  }

  .animate-slide-left {
    animation: slideLeft 0.8s ease-out forwards;
  }

  .animate-slide-right {
    animation: slideRight 0.8s ease-out forwards;
  }

  .animate-zoom-in {
    animation: zoomIn 0.8s ease-out forwards;
  }

  /* Responsive background positioning for mobile */
  @media (max-width: 768px) {
    .bg-cover {
      background-position: center center;
    }
  }

  /* Improve text readability on background images */
  .relative.z-20 {
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  /* Focus styles for accessibility */
  section:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>

<script>
  // Intersection Observer for scroll-based animations
  document.addEventListener('DOMContentLoaded', function() {
    const animatedSections = document.querySelectorAll('[class*="animate-"]');

    // Create intersection observer for animations
    const observerOptions = {
      root: null,
      rootMargin: '0px 0px -100px 0px', // Trigger 100px before element comes into view
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;

          // Remove opacity-0 class to trigger animation
          element.classList.remove('opacity-0');

          // Add a class to indicate animation has been triggered
          element.classList.add('animated');

          // Stop observing this element
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    // Observe all animated sections
    animatedSections.forEach(section => {
      if (section.classList.contains('opacity-0')) {
        observer.observe(section);
      }
    });

    // Handle reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');

    if (prefersReducedMotion.matches) {
      // Remove animations for users who prefer reduced motion
      animatedSections.forEach(section => {
        section.classList.remove('opacity-0');
        section.style.animation = 'none';
      });
    }
  });

  // Smooth scrolling enhancement
  function initSmoothScrolling() {
    const links = document.querySelectorAll('a[href^="#"]');

    links.forEach(link => {
      link.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        const targetSection = document.querySelector(targetId);

        if (targetSection) {
          e.preventDefault();
          targetSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  }

  // Initialize smooth scrolling
  document.addEventListener('DOMContentLoaded', initSmoothScrolling);
</script>
